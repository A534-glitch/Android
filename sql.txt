activity_main.xml: 
<?xml version="1.0" encoding="utf-8"?> 
<androidx.constraintlayout.widget.ConstraintLayout 
xmlns:android="http://schemas.android.com/apk/res/android" 
xmlns:app="http://schemas.android.com/apk/res-auto" 
xmlns:tools="http://schemas.android.com/tools" 
android:id="@+id/main" 
android:layout_width="match_parent" 
android:layout_height="match_parent" 
tools:context=".MainActivity"> 
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" 
android:layout_width="match_parent" 
android:layout_height="match_parent" 
android:orientation="vertical" 
android:padding="16dp" 
tools:layout_editor_absoluteX="0dp" 
tools:layout_editor_absoluteY="0dp"> 
<EditText android:id="@+id/editTextName" 
android:layout_width="match_parent" 
android:layout_height="wrap_content" 
android:hint="Name" /> 
<EditText android:id="@+id/editTextAge" 
android:layout_width="match_parent" 
android:layout_height="wrap_content" 
android:hint="Age" android:inputType="number" /> 
<EditText android:id="@+id/editTextMark" 
android:layout_width="match_parent"  
android:layout_height="wrap_content"  
android:hint="Mark" android:inputType="number" /> 
<Button 
android:id="@+id/buttonInsert" 
android:layout_width="wrap_content" 
android:layout_height="wrap_content"  
android:text="Insert Data" /> 
<Button 
android:id="@+id/buttonSelect"  
android:layout_width="wrap_content" 
android:layout_height="wrap_content" 
android:text="select Data" /> 
<EditText android:id="@+id/deleteIdEditText" 
android:layout_width="match_parent"  
android:layout_height="wrap_content" 
android:layout_below="@id/buttonSelect" 
android:layout_marginTop="16dp"  
android:hint="Enter ID to delete" 
android:inputType="number" /> 
<Button 
android:id="@+id/buttonDelete" 
android:layout_width="wrap_content" 
android:layout_height="wrap_content" 
android:layout_below="@id/deleteIdEditText"  
android:layout_marginTop="16dp"  
android:text="Delete" /> 
<EditText android:id="@+id/deleteIdUpdateText"  
android:layout_width="match_parent" 
android:layout_height="wrap_content" 
android:layout_below="@id/buttonSelect" 
android:layout_marginTop="16dp"  
android:hint="Enter ID to update"  
android:inputType="number" /> 
<Button 
android:id="@+id/buttonGetDetailsToUpdate" 
android:layout_width="wrap_content" 
android:layout_height="35dp"  
android:layout_below="@id/buttonDelete"  
android:text="Get Details to Update" /> 
<Button 
android:id="@+id/buttonUpdate" 
android:layout_width="wrap_content"  
android:layout_height="wrap_content" 
android:text="Update" /> 
<TextView 
android:id="@+id/textViewData" 
android:layout_width="match_parent"  
android:layout_height="wrap_content" 
android:layout_marginTop="16dp"  
android:text="User Data:"  
android:textStyle="bold" /> 
</LinearLayout> 
</androidx.constraintlayout.widget.ConstraintLayout> 
MainActivity.java: 
package com.example.record13; 
import androidx.appcompat.app.AppCompatActivity; 
import android.database.Cursor; 
import android.os.Bundle; import android.view.View; import android.widget.Button; import 
android.widget.EditText; 
import android.widget.TextView; import android.widget.Toast; 
public class MainActivity extends AppCompatActivity { 
private DatabaseHelper db; 
private EditText editTextName, editTextAge, editTextMark, deleteIdEditText, 
deleteIdUpdateText; 
private TextView textViewData; 
protected void onCreate(Bundle savedInstanceState) { 
super.onCreate(savedInstanceState); 
setContentView(R.layout.activity_main); 
db = new DatabaseHelper(this); 
editTextName = findViewById(R.id.editTextName); 
editTextAge = findViewById(R.id.editTextAge); 
editTextMark = findViewById(R.id.editTextMark); 
textViewData = findViewById(R.id.textViewData); 
deleteIdEditText = findViewById(R.id.deleteIdEditText); 
deleteIdUpdateText = findViewById(R.id.deleteIdUpdateText); 
Button buttonInsert = findViewById(R.id.buttonInsert); 
Button buttonSelect = findViewById(R.id.buttonSelect); 
Button buttonDelete = findViewById(R.id.buttonDelete); 
Button buttonUpdate = findViewById(R.id.buttonUpdate); 
Button buttonGetDetailsToUpdate = findViewById(R.id.buttonGetDetailsToUpdate); 
buttonInsert.setOnClickListener(new View.OnClickListener() { 
@Override 
public void onClick(View v) { 
String name = editTextName.getText().toString(); 
String ageString = editTextAge.getText().toString().trim(); 
String markString = editTextMark.getText().toString().trim(); 
if (name.isEmpty() || ageString.isEmpty() || markString.isEmpty()) { 
Toast.makeText(MainActivity.this, "Please fill in all fields", 
Toast.LENGTH_SHORT).show(); 
return; 
} 
int age = Integer.parseInt(ageString); 
int mark = Integer.parseInt(markString); 
boolean insertData = db.insertUser(name, age, mark); 
if (insertData) { 
Toast.makeText(MainActivity.this, "User Inserted Successfully", 
Toast.LENGTH_SHORT).show(); 
editTextName.setText(""); 
                    editTextAge.setText(""); 
                    editTextMark.setText(""); 
                } else { 
                    Toast.makeText(MainActivity.this, "Failed to Insert User", 
Toast.LENGTH_SHORT).show(); 
                } 
            } 
        }); 
        buttonSelect.setOnClickListener(new View.OnClickListener() { 
            public void onClick(View v) { 
                displayData(); 
            } 
        }); 
        buttonDelete.setOnClickListener(new View.OnClickListener() { 
            public void onClick(View v) { 
                deleteDataById(); 
            } 
        }); 
        buttonGetDetailsToUpdate.setOnClickListener(new View.OnClickListener() { 
            public void onClick(View v) { 
                String idString = deleteIdUpdateText.getText().toString(); 
                if (!idString.isEmpty()) { 
                    int idToUpdate = Integer.parseInt(idString); 
                    displayDetailsForUpdate(idToUpdate); 
                } else { 
                    Toast.makeText(MainActivity.this, "Please enter an ID", 
Toast.LENGTH_SHORT).show(); 
                } 
 
            } 
        }); 
        buttonUpdate.setOnClickListener(new View.OnClickListener() { 
            public void onClick(View v) { 
                String name = editTextName.getText().toString(); 
                int age = Integer.parseInt(editTextAge.getText().toString()); 
                int mark = Integer.parseInt(editTextMark.getText().toString()); 
                boolean updateData = db.updateUser(name, age, mark); 
                if (updateData) { 
                    Toast.makeText(MainActivity.this, "User Updated Successfully", 
Toast.LENGTH_SHORT).show(); 
                    editTextName.setText(""); 
                    editTextAge.setText(""); 
                    editTextMark.setText(""); 
                    displayData(); 
                } else { 
 
 
                } 
            } 
        }); 
Toast.makeText(MainActivity .this,"Failed to Update User",Toast.LENGTH_SHORT). 
show(); 
} 
private void deleteDataById() { 
String idString = deleteIdEditText.getText().toString(); 
if (!idString.isEmpty()) { 
int idToDelete = Integer.parseInt(idString); 
boolean deleted = db.deleteUser(idToDelete); 
if (deleted) { 
Toast.makeText(MainActivity.this, "User Deleted Successfully", 
Toast.LENGTH_SHORT).show(); 
displayData(); 
} else { 
Toast.makeText(MainActivity.this, "Failed to Delete User", 
Toast.LENGTH_SHORT).show(); 
} 
} else { 
} 
Toast.makeText(MainActivity.this, "Please enter an ID", 
Toast.LENGTH_SHORT).show(); 
} 
private void displayDetailsForUpdate(int idToUpdate) 
{ 
Cursor cursor = db.getUserById(idToUpdate); 
if (cursor != null && cursor.moveToFirst()) { 
//String name = cursor.getString(cursor.getColumnIndex("NAME")); 
//int age = cursor.getInt(cursor.getColumnIndex("AGE")); 
//int mark = cursor.getInt(cursor.getColumnIndex("MARK")); 
//editTextName.setText(name); editTextAge.setText(String.valueOf(age)); 
// editTextMark.setText(String.valueOf(mark)); 
cursor.close(); 
} else { 
Toast.makeText(MainActivity.this, "User ID not found", 
Toast.LENGTH_SHORT).show(); 
} 
} 
private void displayData() { 
Cursor cursor = db.getAllUsers(); 
if (cursor.getCount() == 0) { textViewData.setText("No users found"); 
} else { 
StringBuilder data = new StringBuilder(); while (cursor.moveToNext()) { 
int id = cursor.getInt(0); 
String name = cursor.getString(1); int age = cursor.getInt(2); 
int mark = cursor.getInt(3); data.append("ID: ").append(id) 
.append(", Name: ").append(name) 
.append(", Age: ").append(age) 
.append(", Mark: ").append(mark) 
.append("\n"); 
} 
textViewData.setText(data.toString()); 
} 
}} 
DatabaseHelper.java 
package com.example.record13; 
import android.content.ContentValues; 
import android.content.Context; import android.database.Cursor; 
import android.database.sqlite.SQLiteDatabase; import 
android.database.sqlite.SQLiteOpenHelper; 
public class DatabaseHelper extends SQLiteOpenHelper { private static final String 
DATABASE_NAME = "users.db"; 
private static final String TABLE_NAME = "users_table"; private static final String COL1 
= "ID"; 
private static final String COL2 = "NAME"; private static final String COL3 = "AGE"; 
private static final String COL4 = "MARK"; public DatabaseHelper(Context context) { 
super(context, DATABASE_NAME, null, 1); 
} 
public void onCreate(SQLiteDatabase db) { 
String createTable = "CREATE TABLE " + TABLE_NAME + " (" + COL1 + " 
INTEGER PRIMARY KEY AUTOINCREMENT, " + COL2 + " TEXT, " + 
COL3 + " INTEGER, " + COL4 + " INTEGER)"; 
db.execSQL(createTable); 
} 
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) { 
db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME); 
onCreate(db); 
} 
public boolean insertUser(String name, int age, int mark) { SQLiteDatabase db = 
this.getWritableDatabase(); ContentValues contentValues = new ContentValues(); 
contentValues.put(COL2, name); contentValues.put(COL3, age); contentValues.put(COL4, 
mark); 
long result = db.insert(TABLE_NAME, null, contentValues); 
return result != -1; // Insertion successful if result != -1, else return false 
} 
public Cursor getAllUsers() { 
SQLiteDatabase db = this.getWritableDatabase(); 
return db.rawQuery("SELECT * FROM " + TABLE_NAME, null); 
} 
public boolean deleteUser(int id) { 
SQLiteDatabase db = this.getWritableDatabase(); 
int result = db.delete(TABLE_NAME, COL1 + "=?", new String[]{String.valueOf(id)}); 
return result > 0; 
} 
public boolean updateUser(String name, int age, int mark) { SQLiteDatabase db = 
this.getWritableDatabase(); ContentValues contentValues = new ContentValues(); 
contentValues.put(COL3, age); contentValues.put(COL4, mark); 
int updatedRows = db.update(TABLE_NAME, contentValues, COL2 + "=?", new 
String[]{name}); 
return updatedRows > 0; 
} 
public Cursor getUserById(int id) { SQLiteDatabase db = this.getWritableDatabase(); 
return db.rawQuery("SELECT * FROM " + TABLE_NAME + " WHERE " + COL1 + 
"=?", new String[]{String.valueOf(id)});
} 
}